class SongPlayingFragment : Fragment() {

    var myActivity: Activity? = null



    var favoriteContent: EchoDatabase? = null


    var songTitle: TextView? = null;
    var songArtist: TextView? = null
    var startTime: TextView? = null
    var endTime: TextView? = null

    var seekBar: SeekBar? = null

    var playpausebutton: ImageButton? = null
    var previousbutton: ImageButton? = null
    var nextbutton: ImageButton? = null
    var loopbutton: ImageButton? = null
    var shufflebutton: ImageButton? = null

    var fab: ImageButton? = null

    var currentPosition: Int = 0
    var currentSongHelper: CurrentSongHelper? = null

    var fetchSongs: ArrayList<Songs>? = null

    var audioVisualization: AudioVisualization? = null
    var glView: GLAudioVisualizationView? = null

    /**
     *  Setting shared preferences
     */

    object Staticated {
        var MY_PREFS_SHUFFLE = "Shuffle feature"
        var MY_PREFS_LOOP = "Loop feature"


        /*Sensor Variables*/
        var mSensorManager: SensorManager? = null
        var mSensorListener: SensorEventListener? = null
        var MY_PREFS_NAME = "ShakeFeature"
    }

    object Statified{
        var mediaPlayer: MediaPlayer? = null
    }

    /**
     * creating an object to allow multi threading
     */

    var updateSongTime = object : Runnable {

        override fun run() {

            /*Retrieving the current time position of the media player*/
            val getCurrent = mediaPlayer?.currentPosition

            /*The start time is set to the current position of the song
            * The TimeUnit class changes the units to minutes and milliseconds and applied to the string
            * The %d:%d is used for formatting the time strings as 03:45 so that it appears like time*/
            startTime?.setText(String.format("%d:%d",

                    TimeUnit.MILLISECONDS.toMinutes(getCurrent?.toLong() as Long),

                    TimeUnit.MILLISECONDS.toSeconds(getCurrent?.toLong() as Long) -
                            TimeUnit.MILLISECONDS.toSeconds(TimeUnit.MILLISECONDS.toMinutes(getCurrent?.toLong() as Long))))


            seekBar?.setProgress(getCurrent?.toInt() as Int)

            /*Since updating the time at each second will take a lot of processing, so we perform this task on the different thread using Handler*/
            Handler().postDelayed(this, 1000)
        }
    }


    var mAcceleration: Float = 0f
    var mAccelerationCurrent: Float = 0f
    var mAccelerationLast: Float = 0f


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        // Inflate the layout for this fragment
        var view = inflater.inflate(R.layout.fragment_song_playing, container, false)

        setHasOptionsMenu(true)

        songTitle = view?.findViewById(R.id.songTitle)
        songArtist = view?.findViewById(R.id.songArtist)
        startTime = view?.findViewById(R.id.startTime)
        endTime = view?.findViewById(R.id.endTime)

        seekBar = view?.findViewById(R.id.seekbar)

        playpausebutton = view?.findViewById(R.id.playpausebutton)
        previousbutton = view?.findViewById(R.id.previousbutton)
        nextbutton = view?.findViewById(R.id.nextbutton)
        loopbutton = view?.findViewById(R.id.loopButton)
        shufflebutton = view?.findViewById(R.id.shuffleButton)


        /*Linking it with the view*/
        fab = view?.findViewById(R.id.favouriteButton)

        /*Fading the favorite icon*/
        fab?.alpha = 0.8f

        glView = view.findViewById(R.id.visualizer_view)

        return view


    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        /*Sensor service is activate when the fragment is created*/
        Staticated.mSensorManager = myActivity?.getSystemService(Context.SENSOR_SERVICE) as SensorManager

        /*Default values*/
        mAcceleration = 0.0f
        /*We take earth's gravitational value to be default, this will give us good results*/
        mAccelerationCurrent = SensorManager.GRAVITY_EARTH
        mAccelerationLast = SensorManager.GRAVITY_EARTH
        /*Here we call the function*/
        bindShakeListener()
    }

    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
        super.onCreateOptionsMenu(menu, inflater)

        menu?.clear()   // clearing any previous menus
        inflater?.inflate(R.menu.song_playing_menu, menu)

    }

    override fun onPrepareOptionsMenu(menu: Menu?) {
        super.onPrepareOptionsMenu(menu)

        val item: MenuItem? = menu?.findItem(R.id.action_redirect)
        item?.isVisible = true
    }

    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
        when (item?.itemId) {
            R.id.action_redirect -> {
                // redirecting the user to the activity from which they came
                myActivity?.onBackPressed()
                return false

            }
        }
        return false
    }


    override fun onViewCreated(view: View, @Nullable savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // you can extract AudioVisualization interface for simplifying things
        audioVisualization = glView as AudioVisualization
    }


    override fun onAttach(context: Context?) {
        super.onAttach(context)
        myActivity = context as Activity

    }


    override fun onAttach(activity: Activity?) {
        super.onAttach(activity)
        myActivity = activity
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)


        /*Initialising the params of the current song helper object*/
        favoriteContent = EchoDatabase(myActivity)
        currentSongHelper = CurrentSongHelper()
        currentSongHelper?.isPlaying = true
        currentSongHelper?.isLoop = false
        currentSongHelper?.isShuffle = false


        var path: String? = null   // to get the args of the buundle
        var _songTitle: String? = null
        var _songArtist: String? = null
        var _songId: Long? = null

        try {
            path = arguments?.getString("path")
            _songArtist = arguments?.getString("songArtist")
            _songTitle = arguments?.getString("songTitle")
            _songId = arguments?.getInt("songId")?.toLong()


            /*Here we fetch the received bundle data for current position and the list of all songs*/
            currentPosition = arguments!!.getInt("position")
            fetchSongs = arguments?.getParcelableArrayList("songData")

            /*Now store the song details to the current song helper object so that they can be used later*/
            currentSongHelper?.songpath = path
            currentSongHelper?.songTitle = _songTitle
            currentSongHelper?.songArtist = _songArtist
            currentSongHelper?.songId = _songId
            currentSongHelper?.currentPosition = currentPosition

            // updating the textViews as soon as the song is changed and loaded

            updateTextViews(currentSongHelper?.songTitle as String, currentSongHelper?.songArtist as String)


        } catch (e: Exception) {
            e.printStackTrace()
        }

        var fromFavbotomBar = arguments?.get("FavBottomBar")  as? String

        if (fromFavbotomBar != null) {
            // i.e the favorite fragment is used

            mediaPlayer = FavoriteFragment.Statified.mediaPlayer
        } else {

            // set up media player for default


            mediaPlayer = MediaPlayer()
            mediaPlayer?.setAudioStreamType(AudioManager.STREAM_MUSIC)

            try {

                //setting the data source for the media player with the help of uri
                mediaPlayer?.setDataSource(myActivity, Uri.parse(path))
                mediaPlayer?.prepare()

            } catch (e: Exception) {
                e.printStackTrace()
            }

            mediaPlayer?.start()
        }

        // precess all the information at the start of the song
        processInformation(mediaPlayer as MediaPlayer)

        if (currentSongHelper?.isPlaying as Boolean) {
            playpausebutton?.setBackgroundResource(R.drawable.pause_icon)
        } else {
            playpausebutton?.setBackgroundResource(R.drawable.play_icon)
        }


        mediaPlayer?.setOnCompletionListener {
            onSongComplete()
        }

        clickHandler()

        /**
         *  set visualiser helper
         *  */

        var visualizationHandler = DbmHandler.Factory.newVisualizerHandler(myActivity as Context, 0)
        audioVisualization?.linkTo(visualizationHandler)


        /**
         *  getting the shared preferences for shuffle set by the song
         */

        var prefsForShuffle = myActivity?.getSharedPreferences(Staticated.MY_PREFS_SHUFFLE, Context.MODE_PRIVATE)

        /*Here we extract the value of preferences and check if shuffle was ON or not*/
        var isShuffleAllowed = prefsForShuffle?.getBoolean("feaure", false)
        if (isShuffleAllowed as Boolean) {

            /*if shuffle was found activated, then we change the icon color and tun loop OFF*/
            currentSongHelper?.isShuffle = true
            currentSongHelper?.isLoop = false
            shufflebutton?.setBackgroundResource(R.drawable.shuffle_icon)
            loopbutton?.setBackgroundResource(R.drawable.loop_white_icon)
        } else {


            /*Else default is set*/
            currentSongHelper?.isShuffle = false
            shufflebutton?.setBackgroundResource(R.drawable.shuffle_white_icon)
        }


        /**
         *  getting the shared preferences for loop set by the song
         */

        var prefsForLoop = myActivity?.getSharedPreferences(Staticated.MY_PREFS_LOOP, Context.MODE_PRIVATE)

        /*Here we extract the value of preferences and check if loop was ON or not*/
        var isLoopAllowed = prefsForLoop?.getBoolean("feature", false)
        if (isLoopAllowed as Boolean) {

            /*If loop was activated we change the icon color and shuffle is turned OFF */
            currentSongHelper?.isShuffle = false
            currentSongHelper?.isLoop = true
            shufflebutton?.setBackgroundResource(R.drawable.shuffle_white_icon)
            loopbutton?.setBackgroundResource(R.drawable.loop_icon)
        } else {

            /*Else defaults are used*/
            loopbutton?.setBackgroundResource(R.drawable.loop_white_icon)
            currentSongHelper?.isLoop = false
        }


        /*Here we check that if the song playing is a favorite, then we show a red colored heart indicating favorite else only the heart boundary
       * This action is performed whenever a new song is played, hence this will done in the playNext(), playPrevious() and onSongComplete() methods*/
        if (favoriteContent?.checkifIdExists(currentSongHelper?.songId?.toInt() as Int) as Boolean) {
            fab?.setBackgroundResource(R.drawable.favorite_on)
        } else {
            fab?.setBackgroundResource(R.drawable.favorite_off)
        }


    }

    override fun onResume() {
        super.onResume()
        Staticated.mSensorManager?.registerListener(Staticated.mSensorListener,
                Staticated.mSensorManager?.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
                , SensorManager.SENSOR_DELAY_NORMAL)
        audioVisualization?.onResume()
    }

    override fun onPause() {
        audioVisualization?.onPause()

        /*When fragment is paused, we remove the sensor to prevent the battery drain*/
        mSensorManager?.unregisterListener(mSensorListener)

        super.onPause()
    }

    // if user leaves the screen destroy it
    override fun onDestroyView() {
        audioVisualization?.release()
        super.onDestroyView()
    }

    /*A new click handler function is created to handle all the click functions in the song playing fragment*/
    fun clickHandler() {

        /*Here we handle the click of the favorite icon
       * When the icon was clicked, if it was red in color i.e. a favorite song then we remove the song from favorites*/
        fab?.setOnClickListener({
            if (favoriteContent?.checkifIdExists(currentSongHelper?.songId?.toInt() as Int) as Boolean) {
                fab?.setBackgroundResource(R.drawable.favorite_off)
                favoriteContent?.deleteFavourite(currentSongHelper?.songId?.toInt() as Int)

                /*Toast is prompt message at the bottom of screen indicating that an action has been performed*/
                Toast.makeText(myActivity, "Removed from Favorites", Toast.LENGTH_SHORT).show()
            } else {

                /*If the song was not a favorite, we then add it to the favorites using the method we made in our database*/
                fab?.setBackgroundResource(R.drawable.favorite_on)
                favoriteContent?.storeAsFavorite(currentSongHelper?.songId?.toInt(), currentSongHelper?.songArtist, currentSongHelper?.songTitle, currentSongHelper?.songpath)
                Toast.makeText(myActivity, "Added to Favorites", Toast.LENGTH_SHORT).show()
            }
        })


        shufflebutton?.setOnClickListener({

            /*Initializing the shared preferences in private mode
            * edit() used so that we can overwrite the preferences*/
            var editorShuffle = myActivity?.getSharedPreferences(Staticated.MY_PREFS_SHUFFLE, Context.MODE_PRIVATE)?.edit()
            var editorLoop = myActivity?.getSharedPreferences(Staticated.MY_PREFS_LOOP, Context.MODE_PRIVATE)?.edit()

            if (currentSongHelper?.isShuffle as Boolean) {
                shufflebutton?.setBackgroundResource(R.drawable.shuffle_white_icon)
                currentSongHelper?.isShuffle = false

                /*If shuffle was activated previously, then we deactivate it*/
                /*The putBoolean() method is used for saving the boolean value against the key which is feature here*/

                /*Now the preferences agains the block Shuffle feature will have a key: feature and its value: false*/
                editorShuffle?.putBoolean("feature", false)
                editorShuffle?.apply()
            } else {

                currentSongHelper?.isShuffle = true
                currentSongHelper?.isLoop = false
                shufflebutton?.setBackgroundResource(R.drawable.shuffle_icon)
                loopbutton?.setBackgroundResource(R.drawable.loop_white_icon)

                /*Else shuffle is activated and if loop was activated then loop is deactivated*/
                editorShuffle?.putBoolean("feature", true)
                editorShuffle?.apply()


                /*Similar to shuffle, the loop feature has a key:feature and its value:false*/
                editorLoop?.putBoolean("feature", false)
                editorLoop?.apply()
            }
        })


        nextbutton?.setOnClickListener({
            currentSongHelper?.isPlaying = true
            playpausebutton?.setBackgroundResource(R.drawable.pause_icon)

            if (currentSongHelper?.isShuffle as Boolean) {
                playNext("PlayNextLikeNormalShuffle")
            } else {
                playNext("PlayNextNormal")
            }

            currentSongHelper?.isLoop = false
        })



        previousbutton?.setOnClickListener({


            /*We set the player to be playing by setting isPlaying to be true*/
            currentSongHelper?.isPlaying = true
            playpausebutton?.setBackgroundResource(R.drawable.play_icon)

            /*First we check if the loop is on or not*/
            if (currentSongHelper?.isLoop as Boolean) {

                /*If the loop was on we turn it off*/
                loopbutton?.setBackgroundResource(R.drawable.loop_white_icon)
            }

            /*After all of the above is done we then play the previous song using the playPrevious() function*/
            playPrevious()

        })




        loopbutton?.setOnClickListener({

            /*The operation on preferences is completely analogous to shuffle, no addition is there*/
            var editorShuffle = myActivity?.getSharedPreferences(Staticated.MY_PREFS_SHUFFLE, Context.MODE_PRIVATE)?.edit()
            var editorLoop = myActivity?.getSharedPreferences(Staticated.MY_PREFS_LOOP, Context.MODE_PRIVATE)?.edit()

            if (currentSongHelper?.isLoop as Boolean) {

                currentSongHelper?.isLoop = false
                loopbutton?.setBackgroundResource(R.drawable.loop_white_icon)
                editorLoop?.putBoolean("feature", false)
                editorLoop?.apply()

            } else {

                currentSongHelper?.isLoop = true
                currentSongHelper?.isShuffle = false
                loopbutton?.setBackgroundResource(R.drawable.loop_icon)
                shufflebutton?.setBackgroundResource(R.drawable.shuffle_white_icon)
                editorShuffle?.putBoolean("feature", false)
                editorShuffle?.apply()
                editorLoop?.putBoolean("feature", true)
                editorLoop?.apply()

            }
        })

        /*Here we handle the click event on the play/pause button*/
        playpausebutton?.setOnClickListener({

            /*if the song is already playing and then play/pause button is tapped
            * then we pause the media player and also change the button to play button*/
            if (mediaPlayer?.isPlaying as Boolean) {
                mediaPlayer?.pause()
                currentSongHelper?.isPlaying = false
                playpausebutton?.setBackgroundResource(R.drawable.play_icon)

                /*If the song was not playing the, we start the music player and
                * change the image to pause icon*/
            } else {
                mediaPlayer?.start()
                currentSongHelper?.isPlaying = true
                playpausebutton?.setBackgroundResource(R.drawable.pause_icon)
            }
        })
    }

    /*The playNext() function is used to play the next song*/
    fun playNext(check: String) {

        /*Let this one sit for a while, We'll explain this after the next section where we will be teaching to add the next and previous functionality*/
        if (check.equals("PlayNextNormal", true)) {
            currentPosition = currentPosition + 1

        } else if (check.equals("PlayNextLikeNormalShuffle", true)) {
            var randomObject = Random()                                                              // initialising a random object of the random class
            var randomPosition = randomObject.nextInt(fetchSongs?.size?.plus(1) as Int)                // setting range of random to size+1
            currentPosition = randomPosition
        }
        if (currentPosition == fetchSongs?.size) {    // if the currentposition exceeds the size, start over
            currentPosition = 0
        }
        var nextSong = fetchSongs?.get(currentPosition)
        currentSongHelper?.songpath = nextSong?.songData
        currentSongHelper?.songTitle = nextSong?.songTitle
        currentSongHelper?.songArtist = nextSong?.artist
        currentSongHelper?.songId = nextSong?.songID as Long

        updateTextViews(currentSongHelper?.songTitle as String, currentSongHelper?.songArtist as String)

        mediaPlayer?.reset()   // resetting the media player once a song completes or next is clicked

        try {
            mediaPlayer?.setDataSource(myActivity, Uri.parse(currentSongHelper?.songpath))
            mediaPlayer?.prepare()
            mediaPlayer?.start()
            processInformation(mediaPlayer as MediaPlayer)
        } catch (e: Exception) {
            e.printStackTrace()
        }

        if (favoriteContent?.checkifIdExists(currentSongHelper?.songId?.toInt() as Int) as Boolean) {
            fab?.setBackgroundResource(R.drawable.favorite_on)
        } else {
            fab?.setBackgroundResource(R.drawable.favorite_off)
        }
    }

    /*The function playPrevious() is used to play the previous song again*/
    fun playPrevious() {

        /*Decreasing the current position by 1 to get the position of the previous song*/
        currentPosition = currentPosition - 1

        /*If the current position becomes less than 1, we make it 0 as there is no index as -1*/
        if (currentPosition == -1) {
            currentPosition = 0
        }
        if (currentSongHelper?.isPlaying as Boolean) {
            playpausebutton?.setBackgroundResource(R.drawable.pause_icon)
        } else {
            playpausebutton?.setBackgroundResource(R.drawable.play_icon)
        }
        currentSongHelper?.isLoop = false

        /*Similar to the playNext() function defined above*/
        var nextSong = fetchSongs?.get(currentPosition)
        currentSongHelper?.songpath = nextSong?.songData
        currentSongHelper?.songTitle = nextSong?.songTitle
        currentSongHelper?.songArtist = nextSong?.artist
        currentSongHelper?.songId = nextSong?.songID as Long

        updateTextViews(currentSongHelper?.songTitle as String, currentSongHelper?.songArtist as String)

        mediaPlayer?.reset()
        try {
            mediaPlayer?.setDataSource(myActivity, Uri.parse(currentSongHelper?.songpath))
            mediaPlayer?.prepare()
            mediaPlayer?.start()
            processInformation(mediaPlayer as MediaPlayer)
        } catch (e: Exception) {
            e.printStackTrace()
        }

        if (favoriteContent?.checkifIdExists(currentSongHelper?.songId?.toInt() as Int) as Boolean) {
            fab?.setBackgroundResource(R.drawable.favorite_on)
        } else {
            fab?.setBackgroundResource(R.drawable.favorite_off)
        }
    }


    /*Function to handle the event where the song completes playing*/
    fun onSongComplete() {

        /*If shuffle was on then play a random next song*/
        if (currentSongHelper?.isShuffle as Boolean) {
            playNext("PlayNextLikeNormalShuffle")
            currentSongHelper?.isPlaying = true
        } else {

            /*If loop was ON, then play the same ong again*/
            if (currentSongHelper?.isLoop as Boolean) {
                currentSongHelper?.isPlaying = true
                var nextSong = fetchSongs?.get(currentPosition)
                currentSongHelper?.currentPosition = currentPosition
                currentSongHelper?.songpath = nextSong?.songData
                currentSongHelper?.songTitle = nextSong?.songTitle
                currentSongHelper?.songArtist = nextSong?.artist
                currentSongHelper?.songId = nextSong?.songID as Long

                updateTextViews(currentSongHelper?.songTitle as String, currentSongHelper?.songArtist as String)


                mediaPlayer?.reset()
                try {
                    mediaPlayer?.setDataSource(myActivity, Uri.parse(currentSongHelper?.songpath))
                    mediaPlayer?.prepare()
                    mediaPlayer?.start()
                    processInformation(mediaPlayer as MediaPlayer)
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            } else {

                /*If loop was OFF then normally play the next song*/
                playNext("PlayNextNormal")
                currentSongHelper?.isPlaying = true
            }


            if (favoriteContent?.checkifIdExists(currentSongHelper?.songId?.toInt() as Int) as Boolean) {
                fab?.setBackgroundResource(R.drawable.favorite_on)
            } else {
                fab?.setBackgroundResource(R.drawable.favorite_off)
            }
        }
    }

    fun updateTextViews(songtitle: String, songartist: String) {
        songTitle?.setText(songtitle)
        songArtist?.setText(songartist)
    }


    /*function used to update the time*/
    fun processInformation(mediaPlayer: MediaPlayer) {

        /*Obtaining the final time*/
        val finalTime = mediaPlayer.duration

        /*Obtaining the current position*/
        val startingTime = mediaPlayer.currentPosition

        seekBar?.max = finalTime
        /*Here we format the time and set it to the start time text*/
        startTime?.setText(String.format("%d:%d",
                TimeUnit.MILLISECONDS.toMinutes(startingTime.toLong()),
                TimeUnit.MILLISECONDS.toSeconds(startingTime.toLong()) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startingTime.toLong())))
        )

        /*Similar to above is done for the end time text*/
        endTime?.setText(String.format("%d:%d",
                TimeUnit.MILLISECONDS.toMinutes(finalTime.toLong()),
                TimeUnit.MILLISECONDS.toSeconds(finalTime.toLong()) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(finalTime.toLong())))
        )

        /*Seekbar has been assigned this time so that it moves according to the time of song*/
        seekBar?.setProgress(startingTime)

        /*Now this task is synced with the update song time obhect*/
        Handler().postDelayed(updateSongTime, 1000)
    }


    /*This function handles the shake events in order to change the songs when we shake the phone*/
    fun bindShakeListener() {

        /*The sensor listener has two methods used for its implementation i.e. OnAccuracyChanged() and onSensorChanged*/
        Staticated.mSensorListener = object : SensorEventListener {

            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {

                /*We do not need to check or work with the accuracy changes for the sensor*/
            }

            override fun onSensorChanged(event: SensorEvent) {

                /*We need this onSensorChanged function
                * This function is called when there is a new sensor event*/
                /*The sensor event has 3 dimensions i.e. the x, y and z in which the changes can occur*/
                val x = event.values[0]
                val y = event.values[1]
                val z = event.values[2]

                /*Now lets see how we calculate the changes in the acceleration*/
                /*Now we shook the phone so the current acceleration will be the first to start with*/
                mAccelerationLast = mAccelerationCurrent

                /*Since we could have moved the phone in any direction, we calculate the Euclidean distance to get the normalized distance*/
                mAccelerationCurrent = Math.sqrt(((x * x + y * y + z * z).toDouble())).toFloat()

                /*Delta gives the change in acceleration*/
                val delta = mAccelerationCurrent - mAccelerationLast

                /*Here we calculate the lower filter
                * The written below is a formula to get it*/
                mAcceleration = mAcceleration * 0.9f + delta

                /*We obtain a real number for acceleration
                * and we check if the acceleration was noticeable, considering 12 here*/
                if (mAcceleration > 12) {

                    /*If the accel was greater than 12 we change the song, given the fact our shake to change was active*/
                    val prefs = myActivity?.getSharedPreferences(Staticated.MY_PREFS_NAME, Context.MODE_PRIVATE)
                    val isAllowed = prefs?.getBoolean("feature", false)

                    val shuffle = myActivity?.getSharedPreferences(Staticated.MY_PREFS_SHUFFLE, Context.MODE_PRIVATE)
                    val isshuffled = shuffle?.getBoolean("feature", false)

                    if (isAllowed as Boolean && isshuffled as Boolean != true) {
                        playNext("PlayNextNormal")
                    } else if (isAllowed as Boolean && isshuffled as Boolean)
                        playNext("PlayNextLikeNormalShuffle")
                }
            }
        }
    }
}

